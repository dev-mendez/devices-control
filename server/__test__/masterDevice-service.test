import { Test } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { MongooseModule } from '@nestjs/mongoose';
import { MongoMemoryServer } from 'mongodb-memory-server';
import { AppModule } from '../src/app.module';
import { ValidationPipe } from '@nestjs/common';
import { useContainer } from 'class-validator';
import mongoose, { Connection, connect, Model } from 'mongoose';
import masterDeviceFakeData from './fakedata/master-device';
import { MasterDeviceService } from 'src/master_device/services/device/masterdevice.service';

import {
  MasterDevice,
  MasterDeviceSchema,
} from '../src/master_device/schemas/masterdevice.schema';

import {
  Peripheral,
  PeripheralSchema,
} from '../src/master_device/schemas/peripheral.schema';

import * as dotenv from 'dotenv';

dotenv.config({});

const env = {
  SERVER_URL: process.env.SERVER_URL,
};

describe('GateWayRepository service', () => {
  let app: INestApplication;
  let moduleFixture;
  let mongoConnection: Connection;
  let masterDeviceModel: Model<MasterDevice>;
  let masterDeviceService: MasterDeviceService;

  afterEach(async () => {
    const collections = mongoose.connection.collections;
    for (const key in collections) {
      const collection = collections[key];
      await collection.deleteMany({});
    }
  });

  afterAll((done) => {
    app.close();
    done();
  });

  beforeAll(async () => {
    moduleFixture = await Test.createTestingModule({
      providers: [MasterDeviceService],
      imports: [
        MongooseModule.forFeature([
          { name: 'MasterDeviceSchema', schema: MasterDeviceSchema },
          { name: 'PeripheralSchema', schema: PeripheralSchema },
        ]),
        MongooseModule.forRootAsync({
          useFactory: async () => {
            const mongod = await MongoMemoryServer.create();
            const uri = mongod.getUri();
            mongoConnection = (await connect(uri)).connection;
            return {
              uri: uri,
            };
          },
        }),
        AppModule,
      ],
    }).compile();

    app = moduleFixture.createNestApplication();
    useContainer(app.select(AppModule), { fallbackOnErrors: true });
    app.useGlobalPipes(new ValidationPipe());

    masterDeviceModel = mongoConnection.model(
      'MasterDeviceSchema',
      MasterDeviceSchema,
    );

    masterDeviceService = app.get<MasterDeviceService>(MasterDeviceService);
    await app.init();
  });

  it('test /masterDevices-service createMasterDevice method', async () => {
    for (let i = 0; i < masterDeviceFakeData.length; i++) {
      await masterDeviceService.createMasterDevice(masterDeviceFakeData[i]);
      console.log('masterDeviceFakeData[i]', masterDeviceFakeData[i]);
    }

    const totalMasterDevice: number = await masterDeviceModel.count({});
    expect(totalMasterDevice).toEqual(masterDeviceFakeData.length);
  });

  // it('test /gateway repository findById method', async () => {
  //   const gateWay = masterDeviceFakeData[0];

  //   const gateWayResult = await masterDeviceServiceRepo.insert(gateWay);
  //   const gateWayDetail = await masterDeviceServiceRepo.findById(
  //     gateWayResult._id,
  //   );

  //   const { _id, serialNumber, name, ipV4 } = gateWayDetail;
  //   expect(_id).toEqual(gateWayResult._id);
  //   expect(serialNumber).toEqual(gateWayResult.serialNumber);
  //   expect(name).toEqual(gateWayResult.name);
  //   expect(ipV4).toEqual(gateWayResult.ipV4);
  // });
});
